@page "/dashboard"

@using BdtClient.Helpers;
@using BdtClient.AppServices.Levels;
@using BdtClient.AppServices.Planner;
@using BdtClient.AppServices.Theme;
@using BdtClient.AppServices.Weekday
@using BdtClient.AppServices.Workouts;
@using BdtClient.Shared.Buttons
@using BdtClient.Shared.Dialogs;
@using BdtClient.Shared.Charts;
@using BdtClient.Shared.LevelDashboard;
@using BdtShared.Dtos.Levels
@using BdtShared.Static;
@using BdtShared.Dtos.Planner;
@using BdtShared.Dtos.WeekDay;
@using BdtShared.Models.Charts;
@using BdtShared.Dtos.Workouts;

@inject IWorkoutService _workoutService
@inject IPlannerService _plannerService
@inject IWeekdayService _weekdayService
@inject ILevelService _levelService
@inject NavigationManager _navigation
@inject BdtClient.AppServices.Theme.BdtThemeService _themeService

@if (Loading)
{
    <PageLoading />
}
else
{
    <MudContainer Class="mt-5 px-2" MaxWidth="MaxWidth.ExtraExtraLarge">

        @if (NextWorkout is not null)
        {
            <NextWorkoutDashboardButton NextWorkout="@NextWorkout" />
        }
            
        <LevelDashboardComponent UserLevel="@UserLevel" SixCountLevel="@SixCountLevel" NavySealsLevel="@NavySealLevel" />

        <MudSelect Class="mt-7 mb-5" FullWidth=false Required=true Margin="Margin.Dense" T="string" Label="View charts by"
                   Variant="MudBlazor.Variant.Text" @bind-Value="@SelectedViewByValue">
            @foreach (var viewBy in ViewByList)
            {
                <MudSelectItem Value=viewBy />
            }
        </MudSelect>

        @* <BurpeeChart ViewBy="@SelectedViewByValue" Title="6 Count" Data="SixCount" SeriesName="6 Count" VisibleGridlines=true PersonalBest="@SixCountPb" />

        <BurpeeChart ViewBy="@SelectedViewByValue" Title="Navy Seal" Data="NavySeals" SeriesName="Navy Seals" VisibleGridlines=true PersonalBest="@NavySealPb" /> *@

        <BurpeeChart2 ViewBy="@SelectedViewByValue" Title="Burpees" Data="UserWorkouts" />

        <PushupChart ViewBy="@SelectedViewByValue" Title="Total Pushups" Data="UserWorkouts" />

    </MudContainer>
}

@code {
    private bool Loading = true;
    private IEnumerable<WorkoutDto>? UserWorkouts;
    private IEnumerable<LevelDto> Levels;
    private PlannerDto NextWorkout;
    private LevelDto UserLevel;
    private LevelDto SixCountLevel;
    private LevelDto NavySealLevel;

    private string SelectedViewByValue = "Workout";
    private List<string> ViewByList = new List<string> { "Workout", "Week" };

    private void CalculateUserLevel(IEnumerable<WorkoutDto> userWorkouts, IEnumerable<LevelDto> levels)
    {
        var oneMonthAgo = DateTime.Now.Date.AddMonths(-5);
        var twentyMinWorkoutsInLastMonth = userWorkouts.Where(x => x.Date >= oneMonthAgo).Where(x => x.WorkoutTime == 20).ToList();
        var sixCounts = twentyMinWorkoutsInLastMonth.Where(x => x.WorkoutTypeId == 1);
        var navySeals = twentyMinWorkoutsInLastMonth.Where(x => x.WorkoutTypeId == 2);
        int maxSixCounts = 0;
        int maxNavySeals = 0;

        if (sixCounts.Count() > 0)
        {
            maxSixCounts = sixCounts.Max(x => x.WokoutValues.FirstOrDefault().Amount);
        }
        if (navySeals.Count() > 0)
        {
            maxNavySeals = navySeals.Max(x => x.WokoutValues.FirstOrDefault().Amount);
        }

        SixCountLevel = levels.FirstOrDefault(x => x.Lower6Count <= maxSixCounts && x.Upper6Count >= maxSixCounts);
        NavySealLevel = levels.FirstOrDefault(x => x.LowerNavySeal <= maxNavySeals && x.UpperNavySeal >= maxNavySeals);

        SessionVariables.SixCountLevel = SixCountLevel;
        SessionVariables.NavySealLevel = NavySealLevel;

        if (SixCountLevel is not null && NavySealLevel is not null)
        {
            UserLevel = levels.FirstOrDefault(x => x.Id == (int)Math.Min(SixCountLevel.Id, NavySealLevel.Id));
            SessionVariables.UserLevel = UserLevel;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var weekdays = await _weekdayService.GetAllWeekdays();
            var todayId = weekdays.Data.FirstOrDefault(x => x.Name == DateTime.Now.DayOfWeek.ToString()).Id;

            var plannerResponse = await _plannerService.GetUserPlans();
            if (plannerResponse.IsSuccess)
            {
                if (plannerResponse.Data.Count() > 0)
                {
                    if (plannerResponse.Data.Any(x => x.WeekDayId >= todayId))
                    {
                        NextWorkout = plannerResponse.Data
                            .Where(x => x.WeekDayId >= todayId)
                            .OrderBy(x => x.WeekDayId)
                            .First();
                    }
                    else
                    {
                        NextWorkout = plannerResponse.Data
                            .OrderBy(x => x.WeekDayId)
                            .First();
                    }
                }
            }

            var levelResp = await _levelService.GetAllLevels();
            var workoutResponse = await _workoutService.GetUserWorkouts();

            if (workoutResponse.IsSuccess && levelResp.IsSuccess)
            {
                Levels = levelResp.Data;
                UserWorkouts = workoutResponse.Data;

                CalculateUserLevel(UserWorkouts, Levels);

                Loading = false;
            }

            else
            {
                //await App.Current.MainPage.DisplayAlert("Oops", $"Error retrieving data: {workoutResponse.ErrorMessage}", "OK");
            }
        }
        catch (Exception ex)
        {
            //await App.Current.MainPage.DisplayAlert("Oops", "There was an issue while attempting to retrieve your data.", "OK");
        }
    }
}
