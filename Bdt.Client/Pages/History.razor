@page "/history"
@attribute [Authorize]

@using Bdt.Client.AppServices.Levels;
@using Bdt.Client.AppServices.WorkoutType
@using Bdt.Client.AppServices.Workouts;
@using Bdt.Client.Shared.Dialogs;
@using Bdt.Shared.Dtos.WorkoutType;
@using Bdt.Shared.Dtos.WorkoutValues;
@using Bdt.Shared.Dtos.Workouts;
@using Bdt.Shared.Models;
@using Bdt.Shared.Models.Workout;
@using Bdt.Client.AppServices.Workouts;
@using Bdt.Client.AppServices.WorkoutType;
@using Bdt.Client.AppServices.Dialog;

@inject IWorkoutService _workoutService
@inject IWorkoutTypeService _workoutTypeService
@inject IBdtDialogService _dialogService

@if (loading)
{
    <PageLoading />
}
else
{
    <MudContainer Class="mt-4 px-2 chart-container" MaxWidth="MaxWidth.ExtraExtraLarge">

        <MudSelect FullWidth=false Required=true Margin="Margin.Normal" T="string" Label="View by"
                   Variant="MudBlazor.Variant.Filled" @bind-Value="@selectedViewByValue" SelectedValuesChanged="@ViewByChanged">
            @foreach (var viewBy in viewByList)
            {
                <MudSelectItem Value=viewBy />
            }
        </MudSelect>

        @if (isWorkouts){
            <MudDataGrid Items="@workouts">
                <Columns>
                    <PropertyColumn Property="x => x.Date.ToShortDateString()" Title="Date" />
                    <PropertyColumn Property="x => x.WorkoutTime" Title="Duration (mins)" />
                    @foreach(var workoutType in workoutTypes)
                    {
                        <TemplateColumn Title="@workoutType.Name">
                            <CellTemplate>
                                @if (context.Item.WokoutValues.Select(x => x.WorkoutType.Name).Contains(workoutType.Name))
                                {
                                    @context.Item.WokoutValues.First(x => x.WorkoutType.Name == workoutType.Name).Amount
                                }
                                else
                                {
                                    @("0")
                                }
                            </CellTemplate>
                        </TemplateColumn>
                    }
                    <PropertyColumn Property="x => x.Comment" Title="Comment" />
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteWorkout(context.Item))" />
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        }
        else
        {
            <MudDataGrid Items="@workoutSummary">
                <Columns>
                    <PropertyColumn Property="x => x.Start.ToShortDateString()" Title="From" />
                    <PropertyColumn Property="x => x.End.ToShortDateString()" Title="To" />
                    <PropertyColumn Property="x => x.TotalWorkoutTime" Title="Total minutes" />
                    @foreach(var workoutType in workoutTypes)
                    {
                        <TemplateColumn Title="@workoutType.Name">
                            <CellTemplate>
                                @if (context.Item.WorkoutCounts.Keys.Contains(workoutType.Name))
                                {
                                    @context.Item.WorkoutCounts[workoutType.Name]
                                }
                                else
                                {
                                    @("0")
                                }
                            </CellTemplate>
                        </TemplateColumn>
                    }
                    
                </Columns>
            </MudDataGrid>
        }

    </MudContainer>
}

@code {
    private bool loading = true;
    private bool isWorkouts = true;
    private string selectedViewByValue = "Workout";

    private List<string> viewByList = [ "Workout", "Week", "Month", "Year" ];

    private List<WorkoutDto> workouts = [];
    private List<WorkoutSummary> workoutSummary = [];
    private List<WorkoutTypeDto> workoutTypes = [];

    private async Task DeleteWorkout(WorkoutDto workoutDto)
    {
        var deleteConfirmed = await _dialogService.DeleteWorkoutDialog();
        if (!deleteConfirmed)
            return;

        var response = await _workoutService.DeleteUserWorkout(workoutDto.Id);

        if (response.IsSuccess)
        {
            workouts.Remove(workoutDto);
        }
        else
        {
            await _dialogService.ShowErrorDialog("Oops!", $"Could not delete this workout, please try again.");
        }
    }

    private void ViewByChanged()
    {
        switch (selectedViewByValue)
        {
            case "Week":
                workoutSummary = SummarizeWeek(workouts);
                isWorkouts = false;
                break;
            case "Month":
                workoutSummary = SummarizeMonth(workouts);
                isWorkouts = false;
                break;
            case "Year":
                workoutSummary = SummarizeYear(workouts);
                isWorkouts = false;
                break;
            default:
                isWorkouts = true;
                break;
        }
    }

    public static List<WorkoutSummary> SummarizeYear(IEnumerable<WorkoutDto> workouts)
    {
        var yearlySummaries = workouts
            .GroupBy(workout => workout.Date.Year)
            .Select(group => new WorkoutSummary
                {
                    Start = new DateTime(group.Key, 1, 1),
                    End = new DateTime(group.Key, 12, 31),
                    TotalWorkoutTime = group.Sum(workout => workout.WorkoutTime)
                })
            .ToList();

        foreach (var summary in yearlySummaries)
        {
            var flattened = new List<WorkoutValuesDto>();
            var workoutValues = workouts
                .Where(x => x.Date >= summary.Start && x.Date < summary.End)
                .Select(x => x.WokoutValues);

            foreach (var value in workoutValues)
            {
                flattened.AddRange(value);
            }

            var workoutCounts = flattened.GroupBy(x => x.WorkoutType.Name)
                .ToDictionary(
                    group => group.Key,
                    group => group.Sum(x => x.Amount)
                );

            summary.WorkoutCounts = workoutCounts;
        }

        return yearlySummaries;
    }

    public static List<WorkoutSummary> SummarizeMonth(IEnumerable<WorkoutDto> workouts)
    {
        var monthlySummaries = workouts
            .GroupBy(workout => GetStartOfMonth(workout.Date))
            .Select(group => new WorkoutSummary
                {
                    Start = group.Key,
                    End = group.Key.AddDays(DateTime.DaysInMonth(group.Key.Year, group.Key.Month) - 1),
                    TotalWorkoutTime = group.Sum(workout => workout.WorkoutTime)
                })
            .ToList();

        foreach (var summary in monthlySummaries)
        {
            var flattened = new List<WorkoutValuesDto>();
            var workoutValues = workouts
                .Where(x => x.Date >= summary.Start && x.Date < summary.End)
                .Select(x => x.WokoutValues);

            foreach (var value in workoutValues)
            {
                flattened.AddRange(value);
            }

            var workoutCounts = flattened.GroupBy(x => x.WorkoutType.Name)
                .ToDictionary(
                    group => group.Key,
                    group => group.Sum(x => x.Amount)
                );

            summary.WorkoutCounts = workoutCounts;
        }

        return monthlySummaries;
    }

    private static DateTime GetStartOfMonth(DateTime date)
    {
        return new DateTime(date.Year, date.Month, 1);
    }

    private static List<WorkoutSummary> SummarizeWeek(IEnumerable<WorkoutDto> workouts)
    {
        var weeklySummaries = workouts
            .GroupBy(workout => GetStartOfWeek(workout.Date))
            .Select(group => new WorkoutSummary
                {
                    Start = group.Key,
                    End = group.Key.AddDays(6),
                    TotalWorkoutTime = group.Sum(workout => workout.WorkoutTime)
                })
            .ToList();

        foreach (var summary in weeklySummaries)
        {
            var flattened = new List<WorkoutValuesDto>();
            var workoutValues = workouts
                .Where(x => x.Date >= summary.Start && x.Date < summary.End)
                .Select(x => x.WokoutValues);

            foreach (var value in workoutValues)
            {
                flattened.AddRange(value);
            }

            var workoutCounts = flattened.GroupBy(x => x.WorkoutType.Name)
                .ToDictionary(
                    group => group.Key,
                    group => group.Sum(x => x.Amount)
                );

            summary.WorkoutCounts = workoutCounts;
        }

        return weeklySummaries;
    }

    private static DateTime GetStartOfWeek(DateTime date)
    {
        int diff = (7 + (date.DayOfWeek - DayOfWeek.Monday)) % 7;
        return date.AddDays(-diff).Date;
    }

    protected override async void OnInitialized()
    {
        workoutTypes = (await _workoutTypeService.GetAllWorkoutTypes()).Data.Where(x => !x.Name.Equals("Accessory")).ToList();

        var respose = await _workoutService.GetUserWorkouts();
        if (!respose.IsSuccess)
        {
            await _dialogService.ShowErrorDialog("Oops!", $"We encountered an issue while attempting to find your workout history, please try again.");
        }

        workouts = respose.Data.OrderByDescending(x => x.Date).ToList();
        loading = false;
        StateHasChanged();
    }
}
