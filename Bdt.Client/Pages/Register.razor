@page "/register"
@attribute [AllowAnonymous]

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Bdt.Client.AppServices.App
@using Bdt.Client.AppServices.Claims
@using Bdt.Client.AppServices.Theme;
@using Bdt.Client.Shared.Dialogs
@using Bdt.Client.Shared.TextInputs
@using Bdt.Shared.Dtos.Users;
@using Bdt.Client.AppServices.Dialog;

@inject IAppService _appService
@inject IDialogService _dialogService
@inject IClaimService _claimService
@inject IBdtDialogService _dialogService
@inject NavigationManager _navigation
@inject BdtThemeService _themeService

<MudContainer Style="height:80vh;width:100%" Class="mt-2">
    <MudItem xs="12" sm="7">
        <MudContainer Class="pa-4">
            @if (isDarkTheme)
            {
                <MudImage Src="images/busy_dad_white_logo_medium.png" Alt="Busy Dad Training" Style="width:100%" Class="mt-2 mb-5" />
            }
            else
            {
                <MudImage Src="images/busy_dad_black_logo_medium.png" Alt="Busy Dad Training" Style="width:100%" Class="mt-2 mb-5" />
            }
            
            <div class="row">
                <MudText Typo="Typo.h5">Create An Account</MudText>
            </div>
            
            <MudForm @bind-IsValid="@success" @bind-Errors="@errors" Class="mt-5">
                <div class="row">
                    <UsernameInputComponent @bind-Username="username" />
                </div>
                <div class="row mt-5">
                    <EmailInputComponent @bind-Email="email" />
                </div>
                <div class="row mt-5">
                    <PasswordInputComponent @bind-Password="password" />
                </div>

                <MudContainer Class="pa-4">
                    <MudLink Class="mt-5" OnClick="OpenTsAndCs"><MudText Typo="Typo.caption">Terms and Conditions</MudText></MudLink>
                </MudContainer>

                <div class="row">
                    <MudCheckBox T="bool" Required="true" RequiredError="You must accept the terms and conditions" Label="Accept terms and conditions" />
                </div>
                
                <div class="row" style="justify-content: center">
                    <MudButton Style="width:400px;height:40px;border-radius:50px;" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Primary" Disabled="@(!success)" Class="m-auto mt-10" OnClick="@Submit">
                        @if (showSpinner)
                        {
                            <MudProgressCircular Size=MudBlazor.Size.Small Color="MudBlazor.Color.Info" Indeterminate="true" />
                        }
                        else
                        {
                            <MudText>Register</MudText>
                        }
                    </MudButton>
                </div>

            </MudForm>
        </MudContainer>
        <MudContainer Class="pa-4">
            <MudLink Href="/login"><MudText Typo="Typo.caption">Already have an account?</MudText></MudLink>
        </MudContainer>
    </MudItem>
</MudContainer>

@code {
    private bool success;
    private string[] errors = [];
    private string password = string.Empty;
    private string username = string.Empty;
    private string email = string.Empty;

    private bool showSpinner = false;
    private bool isDarkTheme = false;

    protected override async Task OnInitializedAsync()
    {
        isDarkTheme = await _claimService.IsDarkTheme();
    }

    private async Task OpenTsAndCs()
    {
        var tsAndCsOk = await _dialogService.TermsAndConditionDialog();
    }

    private async Task Submit()
    {
        showSpinner = true;

        var registerUserDto = new RegisterUserDto
            {
                UserName = username,
                Email = email,
                Password = password
            };

        var response = await _appService.RegisterUser(registerUserDto);

        if (response.IsSuccess)
        {
            showSpinner = false;

            _navigation.NavigateTo($"/pleaseverifyemail/{username}/{email}/{password}");
        }
        else
        {
            showSpinner = false;
            await _dialogService.ShowErrorDialog("Oops!", "Registration has failed, please try again.");
        }
    }

    private IEnumerable<string> PasswordStrength(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
        {
            yield return "Password is required!";
            yield break;
        }
        if (password.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(password, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(password, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(password, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    // private string PasswordMatch(string arg)
    // {
    //     if (Password != arg)
    //         return "Passwords don't match";
    //     return null;
    // }
}
