@page "/forgotpassword/{EmailAddress}/{ResetToken}"
@attribute [AllowAnonymous]

@using Bdt.Client.AppServices.App;
@using Bdt.Client.AppServices.Claims
@using Bdt.Client.AppServices.Theme;
@using System.Text.RegularExpressions;
@using Bdt.Client.Shared.TextInputs
@using Bdt.Shared.Models.App;
@using Bdt.Client.AppServices.Dialog;

@inject IAppService _appService
@inject IClaimService _claimService
@inject IBdtDialogService _dialogService
@inject BdtThemeService _themeService
@inject NavigationManager _navigation

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            @if (isDarkTheme)
            {
                <MudImage Src="images/busy_dad_white_logo_medium.png" Alt="Busy Dad Training" Style="width:100%" Class="mt-5 mb-5" />
            }
            else
            {
                <MudImage Src="images/busy_dad_black_logo_medium.png" Alt="Busy Dad Training" Style="width:100%" Class="mt-5 mb-5" />
            }

            <MudText Class="mb-10" Align="MudBlazor.Align.Center" Typo="Typo.body1">Enter a new password.</MudText>

            <MudForm @bind-IsValid="@success" @bind-Errors="@errors">

                <PasswordInputComponent @bind-Password="@password" Required="true" AddPasswordValidation="true" />

                <div class="d-flex align-center justify-space-between">
                    <MudButton Style="width:400px;height:40px;border-radius:50px;" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Primary" Disabled="@(!success)" Class="m-auto mt-10" OnClick="@Submit">
                        @if (showSpinner)
                        {
                            <MudProgressCircular Size=MudBlazor.Size.Small Color="MudBlazor.Color.Info" Indeterminate="true" />
                        }
                        else
                        {
                            <MudText>Reset Password</MudText>
                        }
                    </MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public string EmailAddress { get; set; }
    [Parameter] public string ResetToken { get; set; }

    private bool success;
    private string[] errors = [];
    private string password;

    private bool showSpinner = false;
    private bool isDarkTheme = false;

    protected override async Task OnInitializedAsync()
    {
        isDarkTheme = await _claimService.IsDarkTheme();
    }

    private async Task Submit()
    {
        showSpinner = true;

        var resetPasswordModel = new ResetPasswordModel
            {
                Email = EmailAddress,
                Password = password,
                Token = ResetToken
            };

        var response = await _appService.ResetPassword(resetPasswordModel);

        if (response.IsSuccess)
        {
            showSpinner = false;

            await _dialogService.ShowSucessDialog("Successful!", $"Your password was reset successfully.");
            _navigation.NavigateTo("/login");
        }
        else
        {
            showSpinner = false;

            await _dialogService.ShowErrorDialog("Oops!", $"Failed to reset your password, please try again.");
        }
    }

    private string PasswordMatch(string arg)
    {
        if (password != arg)
            return "Passwords don't match";
        return null;
    }
}
