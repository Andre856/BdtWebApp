@using Bdt.Client.AppServices.Stripe;
@using Bdt.Shared.Models.StripeModels;
@using Bdt.Shared.Models.Country;
@using Bdt.Shared.Static
@using Bdt.Client.Shared.TextInputs

@inject IJSRuntime _js;
@inject IStripeService _stripeService;
@inject NavigationManager _navigation;

<MudContainer>
    <EditForm Model="@_subRequest">
        <ChildContent Context="EditContext">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12">
                    <div class="form-group">
                        @* <MudTextField Required="true" Label="Name on card" id="CardholderName" class="form-control" @bind-Value="@_subRequest.BillingName"></MudTextField> *@
                        <TextInputComponent Required="true" PlaceHolder="Name on card" Id="CardholderName" Class="form-control" @bind-Text="@_subRequest.BillingName" />
                    </div>
                    <ValidationMessage For="@(() => _subRequest.BillingName)" />
                </MudItem>
                <MudItem xs="12">
                    <div class="form-group">
                        @* <MudTextField Label="Email" Required="true" id="billing-email" class="form-control" @bind-Value="@_subRequest.BillingEmail"></MudTextField> *@
                        <TextInputComponent Required="true" PlaceHolder="Email address" Id="billing-email" Class="form-control" @bind-Text="@_subRequest.BillingEmail" />
                    </div>
                    <ValidationMessage For="@(() => _subRequest.BillingEmail)" />
                </MudItem>
                <MudItem xs="12">
                    <MudText Class="ml-2" Typo="Typo.caption">Card Number*</MudText>
                    <div class="form-group">
                        <div id="cardNumber-element" style="display: block;
                                      width: 100%;
                                      padding: 0.52rem  .75rem;
                                      font-size: 0.5rem;
                                      line-height: 1.5;
                                      color: #495057;
                                      background-color: #fff;
                                      background-clip: padding-box;
                                      border: 1px solid #ced4da;
                                      border-radius: 50px;
                                      box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
                                      transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;">
                        </div>
                        <div id="cardNumber-element-errors" role="alert" color="red"></div>
                    </div>
                </MudItem>
                <MudItem xs="7">
                    <div class="form-group">
                        <div id="cardExpiry-element" style="display: block;
                                      width: 100%;
                                      padding: 0.52rem  .75rem;
                                      font-size: 0.5rem;
                                      line-height: 1.5;
                                      color: #495057;
                                      background-color: #fff;
                                      background-clip: padding-box;
                                      border: 1px solid #ced4da;
                                      border-radius: 50px;
                                      box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
                                      transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;">
                        </div>
                        <div id="cardExpiry-element-errors" role="alert" color="red"></div>
                    </div>
                </MudItem>
                <MudSpacer />
                <MudItem xs="4">
                    <div class="form-group">
                        <div id="cardCvc-element" style="display: block;
                                      width: 100%;
                                      padding: 0.52rem  .75rem;
                                      font-size: 0.5rem;
                                      line-height: 1.5;
                                      color: #495057;
                                      background-color: #fff;
                                      background-clip: padding-box;
                                      border: 1px solid #ced4da;
                                      border-radius: 50px;
                                      box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
                                      transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;">
                        </div>
                        <div id="cardCvc-element-errors" role="alert" color="red"></div>
                    </div>
                </MudItem>
                @* <MudItem xs="12">
                    <MudText Typo="Typo.h6" Align="MudBlazor.Align.Center">Billing Address</MudText>
                </MudItem>
                <MudItem xs="12">
                    <div class="form-group">
                        <MudTextField id="address-line-1" class="form-control" @bind-Value="@_subRequest.Line1" placeholder="Address Line 1..."></MudTextField>
                    </div>
                </MudItem>
                <MudItem xs="12">
                    <div class="form-group">
                        <MudTextField id="address-line-2" class="form-control" @bind-Value="@_subRequest.Line2" placeholder="Address Line 2..."></MudTextField>
                    </div>
                </MudItem>
                <MudItem xs="12">
                    <div class="form-group">
                        <MudTextField id="city" class="form-control" @bind-Value="@_subRequest.City" placeholder="City..."></MudTextField>
                    </div>
                </MudItem> *@
                <MudItem xs="12">
                    <div class="form-group">
                        <DropdownInputComponent TItem="CountryCodeModel" Id="country-code"
                                                Required ="true"
                                                Items="@CountryCodes.CountryCodesList" 
                                                @bind-SelectedItem="SelectedCountry" 
                                                Label="Country" 
                                                GetDisplayValue="@(country => country.Name)" />

                        @* <MudSelect SelectedValuesChanged="@(() => CountrySelected())" Required=true Margin="Margin.Dense" T="CountryCodeModel" Label="Country" id="country-code"
                                   Variant="MudBlazor.Variant.Text" @bind-Value="@SelectedCountry">
                            @foreach (var country in CountryCodes.CountryCodesList)
                            {
                                <MudSelectItem T="CountryCodeModel" Value="@country">@country.Name</MudSelectItem>
                            }
                        </MudSelect> *@
                        @* <label for="countries"></label>
                        <select @bind="@SelectedCountryCode" style="width:100%;color:grey" class="p-2 border-1 rounded-1" name="countries" id="country-code">
                            @foreach (var country in CountryCodes.CountryCodesList)
                            {
                                <option value="@country.Code">@country.Name</option>
                            }
                        </select> *@
                    </div>
                </MudItem>
                <MudItem xs="12">
                    <div class="form-group">
                        @* <MudTextField Required=true Label="Postal Code" id="postal-code" class="form-control" @bind-Value="@_subRequest.PostalCode"></MudTextField> *@
                        <TextInputComponent @bind-Text="_subRequest.PostalCode" PlaceHolder="Postal Code" Required="true" Id="postal-code" Class="form-control" />
                    </div>
                    <ValidationMessage For="@(() => _subRequest.PostalCode)" />
                </MudItem>
            </MudGrid>
        </ChildContent>
    </EditForm>
    
    <div class="row" style="justify-content: center">
        @* <button @onclick="ProcessPaymentAsync" style="width:400px;height:40px;border-radius:50px" class="btn btn-primary">Pay</button> *@
        <MudButton Style="width:400px;height:40px;border-radius:50px;" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Primary" Class="m-auto mt-10" OnClick="@ProcessPaymentAsync">
            @if (ShowSpinner)
            {
                <MudProgressCircular Size=MudBlazor.Size.Small Color="MudBlazor.Color.Info" Indeterminate="true" />
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Lock" Class="mr-1" />
                <MudText Class="ml-1">
                    @($"Pay ${PriceInCents/100}.00")
                </MudText>
            }
        </MudButton>
    </div>
    
</MudContainer>

@code{
    [Parameter] public StripeBillingRequest _subRequest { get; set; }
    [Parameter] public EventCallback<bool> PaymentProcessed { get; set; }
    [Parameter] public int PriceInCents { get; set; }

    protected bool _firstTime;
    private DotNetObjectReference<StripeComponent> _objRef;
    private CountryCodeModel SelectedCountry;
    private string SelectedCountryCode;

    private bool ShowSpinner = false;

    private string StripePubKey;

    private void CountrySelected()
    {
        if (SelectedCountry.Code == "__")
        {
            SelectedCountry = CountryCodes.CountryCodesList.First();
            return;
        }

        _subRequest.Country = SelectedCountry.Code;
    }

    protected override async Task OnInitializedAsync()
    {
        _firstTime = true;
    }

    public void Dispose()
    {
        _objRef?.Dispose();
    }


    public async Task ProcessPaymentAsync()
    {
        ShowSpinner = true;
        _objRef = DotNetObjectReference.Create(this);
        await _js.InvokeVoidAsync("createPaymentMethodServer", _objRef, _subRequest.BillingEmail,
            _subRequest.BillingName, _subRequest.Line1, _subRequest.Line2, _subRequest.City,
            _subRequest.PostalCode, _subRequest.Country);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_firstTime)
        {
            StripePubKey = await _stripeService.GetPublicKey(Globals.Environment == Bdt.Shared.Enums.EnvironmentEnums.Devevelopment);
            if (StripePubKey.ToLower().Contains("error"))
            {
                //await App.Current.MainPage.DisplayAlert("Oops", $"An error has occurred, please try again.", "OK");
                ShowSpinner = false;
                _navigation.NavigateTo("/pricing");
            }

            _firstTime = false;
            await _js.InvokeVoidAsync("initializeStripe", StripePubKey);
        }
    }

    [JSInvokable("Subscribe")]
    public Task Subscribe(string paymentID)
    {
        ShowSpinner = false;
        _subRequest.PaymentMethod = paymentID;
        return PaymentProcessed.InvokeAsync(true);
    }
}