@page "/login"

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.IdentityModel.Tokens.Jwt;
@using System.Security.Claims;
@using BdtServer.Providers
@using BdtShared.Models.App;
@using BdtServer.AppServices.Theme;
@using BdtServer.Shared.Dialogs;
@using BdtServer.AppServices.App
@using BdtShared.Dtos.Users;
@using Microsoft.AspNetCore.Components.Authorization

@inject IAppService _appService
@inject IDialogService _dialogService
@inject NavigationManager _navigation
@inject BdtServer.AppServices.Theme.ThemeService _themeService

<MudContainer Style="height:80vh;width:100%" Class="mt-2">
    
    <MudItem xs="12" sm="7">
        <MudContainer Class="pa-4">
            @if (_themeService.IsDarkTheme)
            {
                <MudImage Src="images/busy_dad_white_logo_medium.png" Alt="Busy Dad Training" Style="width:100%" Class="mt-5 mb-5" />
            }
            else
            {
                <MudImage Src="images/busy_dad_black_logo_medium.png" Alt="Busy Dad Training" Style="width:100%" Class="mt-5 mb-5" />
            }
            <MudForm @ref="Form" @bind-IsValid="@Success" @bind-Errors="@Errors">
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!" @bind-Value="Email"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                <MudTextField T="string" Label="Password" @bind-Value="Password"
                              InputType="InputType.Password"
                              RequiredError="Password is required!" />
                <MudLink OnClick="ForgotPasswordClicked"><MudText Typo="Typo.caption">Forgot password</MudText></MudLink>
                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Primary" Disabled="@(!Success)" Class="ml-auto" OnClick="@Submit">
                        @if (ShowSpinner)
                        {
                            <MudProgressCircular Size=MudBlazor.Size.Small Color="MudBlazor.Color.Info" Indeterminate="true" />
                        }
                        else
                        {
                            <MudText>Login</MudText>
                        }
                    </MudButton>
                </div>
            </MudForm>
        </MudContainer>
        <MudContainer Class="pa-4">
            <MudLink Href="/register"><MudText Typo="Typo.caption">Don't have an account yet? Sign up here!</MudText></MudLink>
        </MudContainer>
    </MudItem>
</MudContainer>

@code {
    private bool Success;
    private string[] Errors = { };
    private string Password;
    private string Email;
    private MudForm Form;

    private bool ShowSpinner = false;

    private async Task ForgotPasswordClicked()
    {
        var parameters = new DialogParameters();
        parameters.Add("Email", Email);
        var dialogResponse = await _dialogService.ShowAsync<ResetPasswordDialog>("Next Workout", parameters);

        var email = await dialogResponse.GetReturnValueAsync<string>();

        _navigation.NavigateTo($"/forgotpassword/{email}");
    }

    private async Task Submit()
    {
        ShowSpinner = true;

        var authenticateUserDto = new AuthenticateUserDto
            {
                Email = Email,
                Password = Password
            };

        var response = await _appService.AuthenticateUser(authenticateUserDto);

        if (!response.IsSuccess)
        {
            ShowSpinner = false;

            if (response.ErrorMessage.Equals("Email not authorized."))
                _navigation.NavigateTo($"/pleaseverifyemail/{authenticateUserDto.Email}/{authenticateUserDto.Email}/{authenticateUserDto.Password}");
            else
            {
                // Show error message or dialog
            }
        }
        else
        {
            var handler = new JwtSecurityTokenHandler();
            var jsontoken = handler.ReadJwtToken(response.Data.AccessToken) as JwtSecurityToken;

            string userId = jsontoken.Claims.FirstOrDefault(x => x.Type == JwtRegisteredClaimNames.NameId)?.Value;
            string username = jsontoken.Claims.FirstOrDefault(x => x.Type == JwtRegisteredClaimNames.UniqueName)?.Value;
            string isDarkThemeClaimValue = jsontoken.Claims.FirstOrDefault(x => x.Type == "IsDarkTheme")?.Value;
            bool isDarkTheme = !string.IsNullOrEmpty(isDarkThemeClaimValue) && isDarkThemeClaimValue.ToLower() == "true";
            string notificationTimeValue = jsontoken.Claims.FirstOrDefault(x => x.Type == "NotificationTime")?.Value;
            TimeSpan notificationTime = !string.IsNullOrEmpty(notificationTimeValue) ? TimeSpan.ParseExact(notificationTimeValue, "hh\\:mm\\:ss", CultureInfo.InvariantCulture) : TimeSpan.Zero;
            string isFirstLoginClaimValue = jsontoken.Claims.FirstOrDefault(x => x.Type == "IsFirstLogin")?.Value;
            bool isFirstLogin = !string.IsNullOrEmpty(isFirstLoginClaimValue) && isFirstLoginClaimValue.ToLower() == "true";

            var userBasicDetail = new UserBasicDetail
                {
                    Email = authenticateUserDto.Email,
                    UserName = username,
                    AccessToken = response.Data.AccessToken,
                    RefreshToken = response.Data.RefreshToken,
                    UserId = userId,
                    IsDarkMode = isDarkTheme,
                    NotificationTime = notificationTime,
                    IsFirstLogin = isFirstLogin
                };

            ShowSpinner = false;

            if (_themeService.IsDarkTheme != isDarkTheme)
                await _themeService.ChangeColorTone(isDarkTheme);

            if (isFirstLogin)
            {
                _navigation.NavigateTo("/getstarted");
            }
            else
            {
                _navigation.NavigateTo("/dashboard");
            }
        }
    }
}
