@page "/forgotpassword/{EmailAddress}"

@using BdtServer.AppServices.App;
@using BdtServer.AppServices.Theme;
@using System.Text.RegularExpressions;
@using BdtShared.Models.App;

@inject IAppService _appService
@inject BdtServer.AppServices.Theme.ThemeService _themeService
@inject NavigationManager _navigation

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            @if (_themeService.IsDarkTheme)
            {
                <MudImage Src="images/busy_dad_white_logo_medium.png" Alt="Busy Dad Training" Style="width:100%" Class="mt-5 mb-5" />
            }
            else
            {
                <MudImage Src="images/busy_dad_black_logo_medium.png" Alt="Busy Dad Training" Style="width:100%" Class="mt-5 mb-5" />
            }
            <MudText Align="MudBlazor.Align.Center" Typo="Typo.body1">Please reset your password below...</MudText>
            <MudForm @bind-IsValid="@Success" @bind-Errors="@Errors">
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @bind-Value="Password"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!" />
                <MudTextField T="string"
                              Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))" />
                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Primary" Disabled="@(!Success)" Class="ml-auto" OnClick="@Submit">
                        @if (ShowSpinner)
                        {
                            <MudProgressCircular Size=MudBlazor.Size.Small Color="MudBlazor.Color.Info" Indeterminate="true" />
                        }
                        else
                        {
                            <MudText>Reset Password</MudText>
                        }
                    </MudButton>
                </div>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4">
            <MudLink Href="/">Already have an account?</MudLink>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public string EmailAddress { get; set; }

    private string ResetPasswordToken;
    private bool Success;
    private string[] Errors = { };
    private MudForm Form;
    private string Password;

    private bool ShowSpinner = false;

    protected override async Task OnInitializedAsync()
    {
        var response = await _appService.ForgotPassword(EmailAddress);

        if (response.IsSuccess)
        {
            ResetPasswordToken = response.Data;
        }
        else
        {
            //await App.Current.MainPage.DisplayAlert("Oops", "Failed to reset password. Please try again.", "OK");
            _navigation.NavigateTo("/login");
        }
    }

    private async Task Submit()
    {
        ShowSpinner = true;

        var resetPasswordModel = new ResetPasswordModel
            {
                Email = EmailAddress,
                Password = Password,
                Token = ResetPasswordToken
            };

        var response = await _appService.ResetPassword(resetPasswordModel);

        if (response.IsSuccess)
        {
            ShowSpinner = false;
            //await App.Current.MainPage.DisplayAlert("Success", "Your password was reset successfully.", "Ok");
            _navigation.NavigateTo("/login");
        }
        else
        {
            ShowSpinner = false;
            //await App.Current.MainPage.DisplayAlert("Oops", "Failed to reset your password, please try again", "Try Again");
        }
    }

    private IEnumerable<string> PasswordStrength(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
        {
            yield return "Password is required!";
            yield break;
        }
        if (password.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(password, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(password, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(password, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (Password != arg)
            return "Passwords don't match";
        return null;
    }
}
