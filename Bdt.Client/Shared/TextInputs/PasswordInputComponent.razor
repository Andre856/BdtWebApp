@using System.Text.RegularExpressions
<style>
    .mud-input.mud-input-outlined .mud-input-outlined-border {
        border-radius: 50px;
        border: 1px solid rgba(0, 0, 0, 0.12);
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
    }
</style>

@if (AddPasswordValidation)
{
    <MudTextField T="string"
                  Immediate="true"
                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"
                  ValueChanged="OnPasswordChanged"
                  Placeholder="@PlaceHolder"
                  Value="@Password"
                  Variant="MudBlazor.Variant.Outlined"
                  Style="height:40px"
                  InputType="@passwordInput"
                  Adornment="Adornment.Start"
                  AdornmentIcon="@passwordInputIcon"
                  OnAdornmentClick="ViewPasswordToggle"
                  AdornmentAriaLabel="Show Password"
                  Required="@Required"
                  RequiredError="@string.Empty" />
}
else
{
    <MudTextField T="string"
                  Immediate="true"
                  ValueChanged="OnPasswordChanged"
                  Placeholder="@PlaceHolder"
                  Value="@Password"
                  Variant="MudBlazor.Variant.Outlined"
                  Style="height:40px"
                  InputType="@passwordInput"
                  Adornment="Adornment.Start"
                  AdornmentIcon="@passwordInputIcon"
                  OnAdornmentClick="ViewPasswordToggle"
                  AdornmentAriaLabel="Show Password"
                  Required="@Required"
                  RequiredError="@string.Empty" />
}



@code {
    [Parameter] public string Password { get; set; } = string.Empty;
    [Parameter] public string PlaceHolder { get; set; } = "Password";
    [Parameter] public bool Required { get; set; } = false;
    [Parameter] public bool AddPasswordValidation { get; set; } = false;
    [Parameter] public EventCallback<string> PasswordChanged { get; set; }
    [Parameter] public EventCallback PasswordMatch { get; set; }

    private bool passwordIsEmpty = true;
    private bool isShow;
    private InputType passwordInput = InputType.Password;
    private string passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void ViewPasswordToggle()
    {
        @if (isShow)
        {
            isShow = false;
            passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            passwordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            passwordInputIcon = Icons.Material.Filled.Visibility;
            passwordInput = InputType.Text;
        }
    }

    private async Task OnPasswordChanged(string value)
    {
        Password = value;
        await PasswordChanged.InvokeAsync(value);
    }

    private IEnumerable<string> PasswordStrength(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
        {
            yield return "Password is required!";
            yield break;
        }
        if (password.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(password, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(password, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(password, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }
}
