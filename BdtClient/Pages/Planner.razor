@page "/planner"

@using BdtShared.Models.Dialogs
@using BdtClient.Helpers;
@using BdtShared.Models.App;
@using BdtClient.AppServices.Weekday
@using BdtClient.AppServices.WorkoutType
@using BdtClient.AppServices.Levels
@using BdtClient.AppServices.Planner
@using BdtClient.Shared.Dialogs
@using BdtShared.Static;
@using BdtShared.Dtos
@using BdtShared.Dtos.Planner
@using BdtShared.Dtos.WeekDay
@using BdtShared.Dtos.WorkoutType
@using BdtShared.Models;
@* @using Plugin.LocalNotification *@

@inject IPlannerService _plannerSevice
@inject IWorkoutTypeService _workoutTypeService
@inject IWeekdayService _weekdayService
@inject IBdtDialogService _dialogService

@if (Loading)
{
    <PageLoading />
}
else
{
    <style>
        .sticky-header {
            position: sticky;
            top: 0;
            z-index: 100; /* Adjust the z-index if needed */
            padding: 1rem; /* Adjust the padding as needed */
            box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); /* Optional: Add a shadow effect */
        }
    </style>

    <MudPaper Square="true" Style="position:sticky; top:0px; z-index:100;" Class="pt-3 mb-3 mud-elevation-4">
        <MudText Class="mt-5" Typo="Typo.body1" Align="MudBlazor.Align.Center">WEEKLY PLANNER</MudText>

        <div class="d-flex justify-content-center">
            <MudGrid Class="justify-end mt-3 mb-5" Style="max-width: 95%">

                <MudSpacer />

                <MudContainer Style="max-width: 100%">
                    <MudText Typo="Typo.caption">@TimeScheduled/80 minutes scheduled</MudText>
                    <MudProgressLinear Color="@(TimeScheduled < 80 ? MudBlazor.Color.Secondary : MudBlazor.Color.Success)" Value="@TimeScheduled" Max="80" Class="my-4" Style="width: 100%; height:7px;" />
                </MudContainer>

            </MudGrid>
        </div>
    </MudPaper>

    <MudContainer MaxWidth="MaxWidth.Large" Class="mb-3">

        @foreach (var weekday in Weekdays)
        {
            <MudCard Outlined="true" Class="mt-3 mb-3 mud-elevation-1" Style="border-radius:10px">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body2">@(NextWorkout?.WeekDayId == weekday.Id ? $"{weekday.Name} (Next workout)" : weekday.Name)</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Disabled="@(TimeScheduled >= 80)" Icon="@Icons.Material.Filled.Add" Color="MudBlazor.Color.Tertiary" OnClick="() => CreateNewWorkout(weekday.Id)" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @{
                        var plans = WeeklyPlans.Where(x => x.WeekDayId == weekday.Id);
                        var color = MudBlazor.Color.Primary;
                    }
                    @foreach (var plan in plans)
                    {
                        if (plan.Equals(NextWorkout))
                        {
                            <MudChip T="string" OnClick="@(() => NextWorkoutClicked(NextWorkout))" OnClose="() => DeletePlan(plan.Id)" Color="MudBlazor.Color.Tertiary">@plan.WorkoutType.Name (@plan.WorkoutDuration mins)</MudChip>
                        }
                        else
                        {
                            <MudChip T="string" OnClose="() => DeletePlan(plan.Id)" Color="MudBlazor.Color.Primary">@plan.WorkoutType.Name (@plan.WorkoutDuration mins)</MudChip>
                        }
                    }
                </MudCardContent>
            </MudCard>
        }
    </MudContainer>
}

@code {
    private List<PlannerDto> WeeklyPlans = [];
    private List<WeekdayDto> Weekdays = [];
    private List<WorkoutTypeDto> WorkoutTypes = [];

    private PlannerDto NextWorkout;

    private bool Loading = true;
    private bool NotificationEnabled;
    private int today = (int)DateTime.Now.DayOfWeek;
    private int TimeScheduled;

    private async Task NextWorkoutClicked(PlannerDto plannerDto)
    {
        await _dialogService.NextWorkoutDashboardDialog(plannerDto.WorkoutDuration, isFromPlanner: true);
    }

    private PlannerDto FindNextWorkout()
    {
        var today = (int)DateTime.Now.DayOfWeek;
        if (WeeklyPlans.Any(x => x.WeekDayId >= today))
        {
            return WeeklyPlans.Where(x => x.WeekDayId >= today)
                .OrderBy(x => x.WeekDayId).First();
        }

        return WeeklyPlans.OrderBy(x => x.WeekDayId).First();
    }

    private async Task DeletePlan(Guid weeklyPlanId)
    {
        var response = await _plannerSevice.DeleteUserPlans(weeklyPlanId);

        if (response.IsSuccess)
        {
            var deletedPlan = response.Data;
            WeeklyPlans.RemoveAll(x => x.Id == weeklyPlanId);
            WeeklyPlans.OrderBy(x => x.WeekDayId);
            TimeScheduled = (int)WeeklyPlans.Select(x => x.WorkoutDuration).Sum();
        }
        else
        {
            await _dialogService.ShowErrorDialog("Oops!", "We encountered an issue while attempting to delete this workout, please try again.");
        }

        if (WeeklyPlans.Count() > 0)
            NextWorkout = FindNextWorkout();

        //if (NotificationEnabled)
        //Helper.SetNotifications(WeeklyPlans);
    }

    private async Task CreateNewWorkout(int weekdayId)
    {
        var newWorkout = await _dialogService.CreatePlanDialog(WorkoutTypes, TimeScheduled);

        if (newWorkout is null)
            return;

        var createPlannerDto = new CreatePlannerDto
            {
                WorkoutDuration = newWorkout.WorkoutDuration,
                WorkoutTypeId = WorkoutTypes.FirstOrDefault(x => x.Name == newWorkout.WorkoutType).Id,
                WeekDayId = weekdayId
            };

        var response = await _plannerSevice.CreateUserPlans(createPlannerDto);
        if (response.IsSuccess)
        {
            WeeklyPlans.Add(response.Data);
            TimeScheduled = (int)WeeklyPlans.Select(x => x.WorkoutDuration).Sum();
        }
        else
        {
            await _dialogService.ShowErrorDialog("Oops!", "We encountered an issue while attempting to schedule this workout, please try again.");
        }

        if (WeeklyPlans.Count() > 0)
            NextWorkout = FindNextWorkout();

        // if (NotificationEnabled)
        //     Helper.SetNotifications(WeeklyPlans);
    }

    protected override async Task OnInitializedAsync()
    {
        //NotificationEnabled = await LocalNotificationCenter.Current.AreNotificationsEnabled();

        var weeklyPlans = await _plannerSevice.GetUserPlans();
        var weekdays = await _weekdayService.GetAllWeekdays();
        var workoutTypes = await _workoutTypeService.GetAllWorkoutTypes();

        if (weeklyPlans.IsSuccess && weekdays.IsSuccess && workoutTypes.IsSuccess)
        {
            WeeklyPlans = weeklyPlans.Data.OrderBy(x => x.WeekDayId).ToList();
            Weekdays = weekdays.Data.OrderBy(x => x.Id).ToList();
            WorkoutTypes = workoutTypes.Data.ToList();
            TimeScheduled = (int)WeeklyPlans.Select(x => x.WorkoutDuration).Sum();
            Loading = false;
        }
        else
        {
            await _dialogService.ShowErrorDialog("Oops!", "We encountered an issue while attempting to retrieve your Weekly schedule, please try again.");

            WeeklyPlans = [];
            Weekdays = [];
            WorkoutTypes = [];
            TimeScheduled = 0;
            Loading = false;
        }

        if (WeeklyPlans.Count() > 0)
            NextWorkout = FindNextWorkout();

        // if (NotificationEnabled)
        //     Helper.SetNotifications(WeeklyPlans);
    }
}
