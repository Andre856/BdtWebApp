@page "/notificationsettings"

@using Bdt.Client.AppServices.Claims
@using Bdt.Client.Helpers;
@using Bdt.Shared.Models.App;
@using Bdt.Client.AppServices.App;
@using Bdt.Client.AppServices.Planner;
@using Bdt.Shared.Static;
@using Plugin.LocalNotification

@inject IAppService _appService
@inject IPlannerService _plannerService
@inject IClaimService _claimService
@inject IBdtDialogService _dialogService

<MudCard Style="height:90vh">
    <MudStack>
        <MudText Class="mt-5 mb-5" Typo="Typo.body1" Align="MudBlazor.Align.Center">NOTIFICATION SETTINGS</MudText>
        <MudSwitch T="bool" CheckedChanged="EventCallback.Factory.Create<bool>(this, ToggleNotifications)" Checked="NotificationEnabled" Class="ml-2"
            ThumbIcon="@Icons.Material.Filled.Notifications" Size="MudBlazor.Size.Small" Color="MudBlazor.Color.Primary" Label="Enable Notifications" />
        <MudTimePicker Variant="MudBlazor.Variant.Filled" PickerClosed="EnableSave" Class="mt-5 mb-5" Label="Notification Time" @bind-Time="NotificationTime" Style="width:100%" />
        <MudIconButton Disabled="SaveButtonDisabled" Color="MudBlazor.Color.Success" Icon="@Icons.Material.Filled.Save" OnClick="NotificationTimeChanged" />
    </MudStack>
</MudCard>

@code {
    private bool SaveButtonDisabled = true;
    private bool NotificationEnabled;
    private TimeSpan? NotificationTime;

    private void EnableSave()
    {
        SaveButtonDisabled = false;
    }

    private async Task NotificationTimeChanged()
    {
        SaveButtonDisabled = true;
        var weeklyPlansResp = await _plannerService.GetUserPlans();
        if (!weeklyPlansResp.IsSuccess)
        {
            await _dialogService.ShowErrorDialog("Oops!", $"We encountered an issue while attempting to update your notification time, please try again.");
            return;
        }
        var weeklyPlans = weeklyPlansResp.Data;

        var resp = await _appService.UpdateUserNotificationTime((TimeSpan)NotificationTime);
        if (resp.IsSuccess)
        {
            await _dialogService.ShowSucessDialog("Oops!", $"Your notification time has been updated.");
        }
        else
        {
            await _dialogService.ShowErrorDialog("Oops!", $"We encountered an issue while attempting to update your notification time, please try again.");
        }
    }

    private async Task ToggleNotifications()
    {
        if (!NotificationEnabled)
        {
            NotificationEnabled = await LocalNotificationCenter.Current.RequestNotificationPermission();
            if (NotificationEnabled)
            {
                var weeklyPlansResp = await _plannerService.GetUserPlans();
                if (!weeklyPlansResp.IsSuccess)
                {
                    await _dialogService.ShowErrorDialog("Oops!", $"We encountered an issue while attempting to enable your notifications, please try again.");
                    return;
                }
                var weeklyPlans = weeklyPlansResp.Data;

                //Helper.SetNotifications(weeklyPlans);
            }
        }
        else
        {
            LocalNotificationCenter.Current.Clear();
            NotificationEnabled = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        NotificationEnabled = await LocalNotificationCenter.Current.AreNotificationsEnabled();
        NotificationTime = await _claimService.GetNotificationTime();
    }
}
