@page "/payment/{StripeApiId}"

@using Bdt.Client.AppServices.App;
@using Bdt.Client.AppServices.Claims
@using Bdt.Client.AppServices.Stripe;
@using Bdt.Client.Handller
@using Bdt.Client.Shared.Stripe;
@using Bdt.Shared.Models.StripeModels;
@using System.Text;
@using Bdt.Client.AppServices.Stripe;
@using Bdt.Client.AppServices.Dialog;
@using Bdt.Client.AppServices.App;

@inject NavigationManager _navigation
@inject IStripeService _stripeService
@inject IAppService _appService
@inject IBdtDialogService _dialogService

@if (!SomethingWentWrong)
{
    <MudCard Class="ml-3 mr-3 p-3">
        <MudStack Spacing=10 Justify="Justify.Center" Style="align-items: center;" Class="mt-1">
            <MudItem>
                <MudImage Src="images/busy_dad_black_logo_medium.png" Alt="Busy Dad Training" Style="width:100%" Class="mt-1 mb-2" />
            </MudItem>
            <MudItem>
                <StripeComponent _subRequest="BillingInfo" @ref="StripePaymentBase" PaymentProcessed="SendSubToServerAsync"></StripeComponent>
            </MudItem>
        </MudStack>
    </MudCard>
}
else
{
    <MudButton OnClick="GoToDashboard">Go to Dashboard</MudButton>
}

@code{
    [Parameter] public string StripeApiId { get; set; }

    protected StripeBillingRequest BillingInfo;
    protected StripeComponent StripePaymentBase;

    private bool SomethingWentWrong = false;

    private string StripePubKey;

    protected override async Task OnInitializedAsync()
    {
        BillingInfo = new() { Price = StripeApiId };
    }

    protected async Task SendSubToServerAsync(bool randy)
    {
        var result = await _stripeService.SendBillingInfo(BillingInfo);
        if (result.Success)
        {
            await _dialogService.ShowSucessDialog("Payment Successful!", $"You can now start using the app!");
            await GoToDashboard();
        }
        else
        {
            await _dialogService.ShowErrorDialog("Oops!", $"Something went wrong during your checkout, please try again.");
            _navigation.NavigateTo($"/payment/{StripeApiId}");
        }
    }

    private async Task GoToDashboard()
    {
        var response = await _appService.SetFirstLoginToFalse();
        if (response.IsSuccess)
        {
            _navigation.NavigateTo("/dashboard");
        }
        else
        {
            SomethingWentWrong = true;
            await _dialogService.ShowErrorDialog("Oops!", @"
                Your payment was successful, however, we are having trouble verifying it in our database.\n
                Please click the 'Go to Dashboard' button. If this message shows up again, please contact\n
                technical support by emailing andre@busydadtraining.com. Thank you.");
        }
    }
}