@using BdtServer.AppServices.Theme;
@using BdtServer.Shared.Dialogs;
@using BdtShared.Dtos.Planner;

@inject BdtServer.AppServices.Theme.ThemeService _themeService
@inject IDialogService _dialogService
@implements IDisposable

<MudButton Style="@buttonStyleString" FullWidth="true" IconSize="MudBlazor.Size.Large" EndIcon="@Icons.Material.Outlined.ArrowForwardIos" Variant="MudBlazor.Variant.Filled" OnClick="() => NextWorkoutClicked(NextWorkout)">
    <MudContainer>
        <MudText Align=MudBlazor.Align.Center Typo="Typo.body1"><b>YOUR NEXT WORKOUT</b></MudText>
        
        @if (NextWorkout.WeekDayId == (int)DateTime.Now.DayOfWeek)
        {
            <MudText Align=MudBlazor.Align.Center Typo="Typo.body2">Today</MudText>
        }
        else if (NextWorkout.WeekDayId == ((int)DateTime.Now.DayOfWeek + 1) % 7)
        {
            <MudText Align=MudBlazor.Align.Center Typo="Typo.body2">Tomorrow</MudText>
        }
        else
        {
            <MudText Align=MudBlazor.Align.Center Typo="Typo.body2">@NextWorkout.WeekDay.Name</MudText>
        }
        
    </MudContainer>
</MudButton>

@* <MudButton Style="@buttonStyleString" FullWidth="true" IconSize="Size.Large" EndIcon="@Icons.Material.Outlined.ArrowForwardIos" Variant="MudBlazor.Variant.Filled" OnClick="() => NextWorkoutClicked(NextWorkout)">
    <MudContainer>
        <MudText Align=MudBlazor.Align.Center Typo="Typo.body1">Your next workout @NextWorkout.WorkoutType.Name workout</MudText>
        <MudText Align=MudBlazor.Align.Center Typo="Typo.body2">
            @NextWorkout.WeekDay.Name (@NextWorkout.WorkoutDuration minutes)
        </MudText>
    </MudContainer>
</MudButton> *@

@code {
    [Parameter] public PlannerDto NextWorkout { get; set; }

    private string buttonStyleString;

    protected override void OnInitialized()
    {
        _themeService.ThemeChanged += SetButtonStyle;

        SetButtonStyle();
    }

    private void SetButtonStyle()
    {
        buttonStyleString = $"border-radius:50px;background-image:linear-gradient(to left, {_themeService.CurrentColorTone.Info}, {_themeService.CurrentColorTone.Background})";

        StateHasChanged();
    }

    public void Dispose()
    {
        _themeService.ThemeChanged -= StateHasChanged;
    }

    private async Task NextWorkoutClicked(PlannerDto plannerDto)
    {
        var parameters = new DialogParameters();
        parameters.Add("WorkoutDuration", plannerDto.WorkoutDuration);
        parameters.Add("IsFromPlanner", false);
        var dialogResponse = await _dialogService.ShowAsync<NextWorkoutDashboardDialog>("Next Workout", parameters);
    }
}
