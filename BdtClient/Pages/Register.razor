@page "/register"

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using BdtClient.AppServices.App
@using BdtClient.AppServices.Claims
@using BdtClient.AppServices.Theme;
@using BdtClient.Shared.Dialogs
@using BdtShared.Dtos.Users;

@inject IAppService _appService
@inject IDialogService _dialogService
@inject IClaimService _claimService
@inject NavigationManager _navigation
@inject BdtClient.AppServices.Theme.BdtThemeService _themeService

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudContainer Class="pa-4">
            @if (isDarkTheme)
            {
                <MudImage Src="images/busy_dad_white_logo_medium.png" Alt="Busy Dad Training" Style="width:100%" Class="mt-2 mb-5" />
            }
            else
            {
                <MudImage Src="images/busy_dad_black_logo_medium.png" Alt="Busy Dad Training" Style="width:100%" Class="mt-2 mb-5" />
            }
            <MudForm @bind-IsValid="@Success" @bind-Errors="@Errors">
                <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" @bind-Value="Username" />
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!" @bind-Value="Email"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "Email address is invalid"})" />
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @bind-Value="Password"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!" />
                <MudTextField T="string"
                              Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))" />

                <MudContainer Class="pa-4">
                    <MudLink Class="mt-5" OnClick="OpenTsAndCs"><MudText Typo="Typo.caption">Terms and Conditions</MudText></MudLink>
                </MudContainer>
                <div class="d-flex align-center justify-space-between">
                    <MudCheckBox T="bool" Required="true" RequiredError="You must accept the terms and conditions" Label="Accept terms and conditions" />
                    <MudButton Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Primary" Disabled="@(!Success)" Class="ml-auto" OnClick="@Submit">
                        @if (ShowSpinner)
                        {
                            <MudProgressCircular Size=MudBlazor.Size.Small Color="MudBlazor.Color.Info" Indeterminate="true" />
                        }
                        else
                        {
                            <MudText>Register</MudText>
                        }
                    </MudButton>
                </div>
            </MudForm>
        </MudContainer>
        <MudContainer Class="pa-4">
            <MudLink Href="/"><MudText Typo="Typo.caption">Already have an account?</MudText></MudLink>
        </MudContainer>
    </MudItem>
</MudGrid>

@code {
    private bool Success;
    private string[] Errors = { };
    private string Password;
    private string Username;
    private string Email;

    private bool ShowSpinner = false;
    private bool isDarkTheme = false;

    protected override async Task OnInitializedAsync()
    {
        isDarkTheme = await _claimService.IsDarkTheme();
    }

    private async Task OpenTsAndCs()
    {
        var tsAndCs = await _dialogService.ShowAsync<TermsAndConditionDialog>();
        var tsAndCsOk = await tsAndCs.GetReturnValueAsync<bool>();
    }

    private async Task Submit()
    {
        ShowSpinner = true;

        var registerUserDto = new RegisterUserDto
            {
                UserName = Username,
                Email = Email,
                Password = Password
            };

        var response = await _appService.RegisterUser(registerUserDto);

        if (response.IsSuccess)
        {
            ShowSpinner = false;

            _navigation.NavigateTo($"/pleaseverifyemail/{Username}/{Email}/{Password}");
        }
        else
        {
            ShowSpinner = false;
            //await App.Current.MainPage.DisplayAlert("Oops", "Registration has failed, please try again", "Try Again");
        }
    }

    private IEnumerable<string> PasswordStrength(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
        {
            yield return "Password is required!";
            yield break;
        }
        if (password.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(password, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(password, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(password, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (Password != arg)
            return "Passwords don't match";
        return null;
    }
}
