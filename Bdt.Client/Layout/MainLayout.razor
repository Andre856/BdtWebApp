@using Bdt.Client.AppServices.App;
@using Bdt.Client.AppServices.Claims
@using Bdt.Client.AppServices.Theme;
@using Bdt.Client.Provider
@using Bdt.Shared.Models.App;
@using Microsoft.AspNetCore.Components.Authorization

@inherits LayoutComponentBase
@inject NavigationManager _navigation
@inject IAppService _appService
@inject IClaimService _claimService
@inject CustomAuthStateProvider _authStateProvider
@inject BdtThemeService _themeService

<MudThemeProvider Theme="MyCustomTheme" IsDarkMode="@isDarkTheme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
@if (isAuthenticated && !isFirstLogin)
{
    <MudLayout>

        <MudAppBar Class="justify-end">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="MudBlazor.Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudSpacer />
            <MudImage Src="images/max_only_white_small.png" Alt="Busy Dad Training" Height="100" />
            <MudSpacer />
            <MudSwitch T="bool" Value="@isDarkTheme" ValueChanged="@ToggleTheme" Style="margin:0" ThumbIcon="@Icons.Material.Filled.LightMode" Size="MudBlazor.Size.Medium" Color="MudBlazor.Color.Primary"></MudSwitch>
        </MudAppBar>
        <MudDrawer @bind-Open="@DrawerIsOpen">
            <NavMenu />
        </MudDrawer>

        <MudMainContent>
            @Body
        </MudMainContent>
    </MudLayout>
}
else
{
    @Body
}

@code {
    private bool DrawerIsOpen = true;
    private bool isAuthenticated;
    private bool isFirstLogin = false;
    private bool isDarkTheme = false;
    private MudTheme MyCustomTheme = new MudTheme
    {
        Typography = new()
        {
            Default = new Default()
                {
                    FontFamily = new[] { "Oswald", "Helvetica", "Arial", "sans-serif" }
                }
        }
    };

    private async Task ToggleTheme()
    {
        isDarkTheme = !isDarkTheme;
        await _appService.UpdateUserThemeAsync(isDarkTheme);
        _themeService.NotifyThemeChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthenticated = user.Identity.IsAuthenticated;

        if (isAuthenticated)
        {
            isFirstLogin = await _claimService.IsFirstLogin();
            isDarkTheme = await _claimService.IsDarkTheme();
        }

        // Subscribe to authentication state changes
        _authStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;

        // MyCustomTheme.Typography = new Typography()
        //     {
        //         Default = new Default()
        //         {
        //             FontFamily = new[] { "Oswald", "Helvetica", "Arial", "sans-serif" }
        //         }
        //     };
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        var user = authState.User;

        isAuthenticated = user.Identity.IsAuthenticated;

        if (isAuthenticated)
        {
            isFirstLogin = await _claimService.IsFirstLogin();
        }

        // Trigger re-rendering of the component
        StateHasChanged();
    }

    private void DrawerToggle()
    {
        DrawerIsOpen = !DrawerIsOpen;
    }

    public void Dispose()
    {
        // Unsubscribe from the authentication state changes to avoid memory leaks
        _authStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
