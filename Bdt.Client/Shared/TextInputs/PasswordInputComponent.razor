<style>
    .mud-input.mud-input-outlined .mud-input-outlined-border {
        border-radius: 50px;
        border: 1px solid rgba(0, 0, 0, 0.12);
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
    }
</style>

<MudTextField T="string"
              ValueChanged="OnPasswordChanged"
              Placeholder="Password"
              Value="@Password"
              Variant="MudBlazor.Variant.Outlined"
              Style="height:40px"
              InputType="@passwordInput"
              Adornment="Adornment.Start"
              AdornmentIcon="@passwordInputIcon"
              OnAdornmentClick="ViewPasswordToggle"
              AdornmentAriaLabel="Show Password"
              Required="@Required"
              RequiredError="@string.Empty" />


@code {
    [Parameter] public string Password { get; set; } = string.Empty;
    [Parameter] public bool Required { get; set; } = false;
    [Parameter] public EventCallback<string> PasswordChanged { get; set; }

    private bool passwordIsEmpty = true;
    private bool isShow;
    private InputType passwordInput = InputType.Password;
    private string passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void ViewPasswordToggle()
    {
        @if (isShow)
        {
            isShow = false;
            passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            passwordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            passwordInputIcon = Icons.Material.Filled.Visibility;
            passwordInput = InputType.Text;
        }
    }

    private async Task OnPasswordChanged(string value)
    {
        Password = value;
        await PasswordChanged.InvokeAsync(value);
    }
}
