@using Bdt.Client.AppServices.App;
@using Bdt.Client.AppServices.Claims
@using Bdt.Client.AppServices.Theme;
@using Bdt.Client.Provider
@using Bdt.Shared.Models.App;
@using Microsoft.AspNetCore.Components.Authorization

@inherits LayoutComponentBase
@inject NavigationManager _navigation
@inject CustomAuthStateProvider _authStateProvider
@inject BdtThemeService _themeService
@inject IAppService _appService
@inject IClaimService _claimService
@inject IJSRuntime _jsRuntime

<MudThemeProvider Theme="@MyCustomTheme" IsDarkMode="@isDarkTheme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
@if (isAuthenticated && !isFirstLogin)
{
    <MudLayout>
    @if (isMobile)
    {
        <MudAppBar Class="justify-end">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="MudBlazor.Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudSpacer />
            <MudImage Src="images/max_only_white_small.png" Alt="Busy Dad Training" Height="100" />
            <MudSpacer />
            <MudSwitch T="bool" Value="@isDarkTheme" ValueChanged="@ToggleTheme" Style="margin:0" ThumbIcon="@Icons.Material.Filled.LightMode" Size="MudBlazor.Size.Medium" Color="MudBlazor.Color.Primary"></MudSwitch>
        </MudAppBar>
            <MudAppBar Class="justify-center" Bottom="true">
            <MudIconButton Style="display:flex;justify-content:center;align-items:center;color:white" Href="/" Icon="@Icons.Material.Filled.BarChart" />
           
            <MudSpacer />
            @* <MudNavLink Class="mt-4" Href="/intervaltimer" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.AvTimer">Timer</MudNavLink> *@
            <MudIconButton Style="color:white" Href="/planner" Icon="@Icons.Material.Filled.EditCalendar" />
            <MudSpacer />
            <MudIconButton Style="color:white" Href="/addworkout/0" Icon="@Icons.Material.Filled.AddCircle" />
            <MudSpacer />
            <MudIconButton Style="color:white" Href="/history" Icon="@Icons.Material.Filled.TableView" />
        </MudAppBar>
        <MudDrawer @bind-Open="@DrawerIsOpen">
            <NavMenu />
        </MudDrawer>
    }
    else
    {
        <MudAppBar Class="justify-end">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="MudBlazor.Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudSpacer />
            <MudImage Src="images/max_only_white_small.png" Alt="Busy Dad Training" Height="100" />
            <MudSpacer />
            <MudSwitch T="bool" Value="@isDarkTheme" ValueChanged="@ToggleTheme" Style="margin:0" ThumbIcon="@Icons.Material.Filled.LightMode" Size="MudBlazor.Size.Medium" Color="MudBlazor.Color.Primary"></MudSwitch>
        </MudAppBar>
        <MudDrawer @bind-Open="@DrawerIsOpen">
            <NavMenu />
        </MudDrawer>
    }
        <MudMainContent>
            @Body
        </MudMainContent>

    </MudLayout>
}
else
{
    @Body
}

@code {
    private bool DrawerIsOpen = true;
    private bool isAuthenticated;
    private bool isFirstLogin = false;
    private bool isDarkTheme = false;
    private bool isMobile = true;

    private MudTheme MyCustomTheme = new MudTheme
    {
        PaletteLight = new PaletteLight()
        {
            AppbarBackground = "rgba(39,39,47,1)"
        },
        Typography = new()
        {
            Default = new Default()
                {
                    FontFamily = new[] { "Oswald", "Helvetica", "Arial", "sans-serif" }
                }
        }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isMobile = await _jsRuntime.InvokeAsync<bool>("detectMobile");
            StateHasChanged(); // Re-render the component
        }
    }

    private async Task ToggleTheme()
    {
        isDarkTheme = !isDarkTheme;
        await _appService.UpdateUserThemeAsync(isDarkTheme);
        _themeService.NotifyThemeChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthenticated = user.Identity.IsAuthenticated;

        if (isAuthenticated)
        {
            isFirstLogin = await _claimService.IsFirstLogin();
            isDarkTheme = await _claimService.IsDarkTheme();
        }

        // Subscribe to authentication state changes
        _authStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        var user = authState.User;

        isAuthenticated = user.Identity.IsAuthenticated;

        if (isAuthenticated)
        {
            isFirstLogin = await _claimService.IsFirstLogin();
        }

        // Trigger re-rendering of the component
        StateHasChanged();
    }

    private void DrawerToggle()
    {
        DrawerIsOpen = !DrawerIsOpen;
    }

    public void Dispose()
    {
        // Unsubscribe from the authentication state changes to avoid memory leaks
        _authStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
